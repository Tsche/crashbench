{"cells":[{"code":"# Metavars\n## At function scope","language":"markdown","kind":"markdown"},{"code":"int main(){\n    [[META::var(5)]];\n}","language":"cpp","kind":"code"},{"code":"(function_definition\n    (compound_statement\n        (attributed_statement\n            (attribute_declaration\n                (attribute\n                    prefix: (identifier) @name\n                    name: (identifier) @generator\n                    (argument_list)? @arguments \n        ))+\n        (expression_statement \";\")) @node\n))","language":"scm","kind":"code"},{"code":"## At global scope","language":"markdown","kind":"markdown"},{"code":"[[META::var(5)]];\nint main(){}","language":"cpp","kind":"code"},{"code":"(translation_unit (attributed_statement\n            (attribute_declaration\n                (attribute\n                    prefix: (identifier) @name\n                    name: (identifier) @generator\n                    (argument_list)? @arguments \n        ))+\n        (expression_statement \";\")) @node)","language":"scm","kind":"code"},{"code":"## At namespace scope","language":"markdown","kind":"markdown"},{"code":"namespace Foo {\n[[META::var(5)]];\n}","language":"cpp","kind":"code"},{"code":"(namespace_definition \n    body: (declaration_list\n        (attributed_statement\n            (attribute_declaration\n                (attribute\n                    prefix: (identifier) @name\n                    name: (identifier) @generator\n                    (argument_list)? @arguments \n        ))+\n        (expression_statement \";\")) @node\n))","language":"scm","kind":"code"},{"code":"# Vars","language":"markdown","kind":"markdown"},{"code":"int main() {\n  [[benchmark(\"type_at\")]] {\n    [[STRATEGY::var(\"recursive\", \"nested\", \"paging\", /*, \"cpp26\"*/)]];\n    [[COUNT::range(0, 255)]];\n  }\n}","language":"cpp","kind":"code"},{"code":"(attributed_statement\n    (attribute_declaration\n        (attribute\n            prefix: (identifier) @name\n            name: (identifier) @generator\n            (argument_list)? @arguments \n        ))+\n    (expression_statement \";\")) @node","language":"scm","kind":"code"},{"code":"## Config","language":"markdown","kind":"markdown"},{"code":"[[standard('>=26')]];\nint main() {}","language":"cpp","kind":"code"},{"code":"(translation_unit (attributed_statement\n            (attribute_declaration\n                (attribute\n                    name: (identifier) @setting\n                    (argument_list) @arguments \n        ))+\n        (expression_statement \";\")) @node)","language":"scm","kind":"code"},{"code":"# Tests","language":"markdown","kind":"markdown"},{"code":"int main() {\n    [[benchmark(\"foo\")]]{\n        // ...\n    }\n\n    [[test(\"bar\")]] {\n        // ...\n    }\n}","language":"cpp","kind":"code"},{"code":"\n(attributed_statement \n    (attribute_declaration\n        (attribute\n            name: (identifier) @kind (.match? @kind \"^(benchmark|test)\")\n            (argument_list\n                (string_literal \n                    (string_content) @name))\n        ) ) @attributes\n    (compound_statement) @code)","language":"scm","kind":"code"},{"code":"# Template parameter","language":"markdown","kind":"markdown"},{"code":"template <int [[foo]] nttp1, int nttp2 [[foo]]>\nvoid zoinks(){}","language":"cpp","kind":"code"},{"code":"\n(template_declaration\n    parameters: (template_parameter_list \n        (parameter_declaration\n            type: (_) @type\n            ([\n                (attributed_declarator \n                    (identifier) @ident \n                    (attribute_declaration) @attr) \n                (\n                    (attribute_declaration) @attr \n                    (identifier) @ident)])) @decl))","language":"scm","kind":"code"},{"code":"# Using directive","language":"markdown","kind":"markdown"},{"code":"int main() {\n    [[foo]] using namespace bar;\n}","language":"cpp","kind":"code"},{"code":"(declaration \n    (attribute_declaration (_) @attr_content) @attr\n    type: (type_identifier) @type (.eq? @type \"using\")\n    declarator: (identifier) @name (.eq? @name \"namespace\")\n) @decl","language":"scm","kind":"code"}]}